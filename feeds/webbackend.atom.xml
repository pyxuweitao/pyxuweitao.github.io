<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>肉包子打狗</title><link href="xuweitao.me/" rel="alternate"></link><link href="xuweitao.me/feeds/webbackend.atom.xml" rel="self"></link><id>xuweitao.me/</id><updated>2015-07-20T15:15:00+08:00</updated><entry><title>Django项目部署-Nginx篇</title><link href="xuweitao.me/djangoxiang-mu-bu-shu-nginxpian.html" rel="alternate"></link><updated>2015-07-20T15:15:00+08:00</updated><author><name>徐维涛</name></author><id>tag:,2015-07-20:xuweitao.me/djangoxiang-mu-bu-shu-nginxpian.html</id><summary type="html">&lt;h1&gt;Nginx+uWSGI+Django+Ubuntu&lt;/h1&gt;
&lt;h2&gt;部署环境说明&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04.2 LTS&lt;/li&gt;
&lt;li&gt;Linux Core 3.13.0-46-generic&lt;/li&gt;
&lt;li&gt;Python 2.7.6&lt;/li&gt;
&lt;li&gt;Django 1.4.16&lt;/li&gt;
&lt;li&gt;uWSGI 2.0.9&lt;/li&gt;
&lt;li&gt;Nginx 1.4.6&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;strong&gt;安装&lt;code&gt;Nginx&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;通常Nginx作为静态资源server用来接受和处理静态资源的请求(&lt;strong&gt;这是他擅长的&lt;/strong&gt;)，而对于非静态资源的请求，Nginx虽然也负责接收，但只承担传递功能，通过uWSGI将非静态资源的请求传递给Django来处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;安装&lt;code&gt;uWSGI&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WSGI&lt;/code&gt;：Python的web服务器网关接口。是web应用程序或框架和web服务器一种协议规范。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uWSGI&lt;/code&gt;：是一种web应用服务器，实现了WSGI、uwsgi、HTTP等协议。Nginx中内置了模块与uWSGI服务器进行交换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uwsgi&lt;/code&gt;：是uWSGI服务器特有的通信协议。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;web服务器与web应用服务器&lt;/code&gt;：简单的来说，web服务器（例如Nginx、Apache）用来传递HTTP请求给服务器应用程序，处理静态文件或者进行页面跳转等等。而web应用服务器（例如uWSGI、Tomcat）是用来实现商业逻辑提供页面动态。它更像是一个容器，用于承载动态的页面。我最喜欢的一个比喻：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Apache是一辆卡车，上面可以装一些东西如html等。但是不能装水，要装水必须要有容器（桶）比如Tomcat，而这个桶也可以不放在卡车上。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在没有&lt;code&gt;Nginx&lt;/code&gt;的情况下，也可以通过&lt;code&gt;uWSGI&lt;/code&gt;和&lt;code&gt;Django&lt;/code&gt;实现一个简单的WEB服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;多种下载安装方法参考&lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/WSGIquickstart.html"&gt;uWSGI官网的QuickStart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我用的是&lt;code&gt;pip&lt;/code&gt;，当然使用&lt;code&gt;pip&lt;/code&gt;安装之前首先需要安装&lt;code&gt;pip&lt;/code&gt;，此处不赘述。以下为安装uWSGI的&lt;code&gt;pip&lt;/code&gt;方法安装命令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#下载安装必要的编译支持包和支持python API的C/C++调用包(python-dev)&lt;/span&gt;
sudo apt-get install build-essential python-dev
&lt;span class="c"&gt;#pip安装uwsgi&lt;/span&gt;
sudo pip install uwsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;strong&gt;测试&lt;code&gt;uWSGI&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;安装完毕之后可以测试一下&lt;code&gt;uWSGI&lt;/code&gt;
这里贴出官网的&lt;code&gt;test_demo&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#foobar.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;：&lt;strong&gt;这里函数名在你定制uWSGI之前严格按照test_demo来，因为application是&lt;code&gt;uWSGI&lt;/code&gt;默认搜索的函数名。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;保存之后执行命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;uwsgi&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9090&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后访问&lt;code&gt;127.0.0.1:9090&lt;/code&gt;可以获得一个&lt;code&gt;Hello World&lt;/code&gt;的响应。
没有指定&lt;code&gt;uWSGI&lt;/code&gt;进程和线程数，默认的&lt;code&gt;uWSGI&lt;/code&gt;使用单进程单线程，限制了并发量。更常用的写法其实是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;uwsgi&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9090&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9091&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行这条命令之后，产生以下结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;uWSGI服务器映射到9090端口&lt;/li&gt;
&lt;li&gt;uWSGI应用脚本设置为foobar.py&lt;/li&gt;
&lt;li&gt;创建4个worker进程，每个进程包含两个线程&lt;/li&gt;
&lt;li&gt;创建一个master主进程（当其他worker进程死掉后重启死掉的进程）和一个SERVER进程&lt;/li&gt;
&lt;li&gt;映射9091端口以JSON的格式输出uWSGI内部统计数据，以起到监视作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;使用&lt;code&gt;uWSGI&lt;/code&gt;启动&lt;code&gt;Django&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;在确保你的&lt;code&gt;Django&lt;/code&gt;项目能正常跑起来的情况下，利用Django项目自动生成的&lt;code&gt;wsgi.py&lt;/code&gt;来启动&lt;code&gt;uWSGI&lt;/code&gt;服务器。假设你的项目名称是&lt;code&gt;yoursite&lt;/code&gt;。&lt;strong&gt;进入Django项目的根目录&lt;/strong&gt;，在终端执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#其中YourSite目录就是与settings.py同级的目录&lt;/span&gt;
uwsgi --http :8080 --wsgi-file YourSite/wsgi.py 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你的&lt;code&gt;Django&lt;/code&gt;版本过老，没有自动生成&lt;code&gt;wsgi.py&lt;/code&gt;，就自己创建一个&lt;code&gt;wsgi.py&lt;/code&gt;放到&lt;code&gt;settings.py&lt;/code&gt;的同级目录下。拷贝以下的代码到自建的&lt;code&gt;wsgi.py&lt;/code&gt;。之后同样执行上述命令启动。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;yoursite.settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#更老的Django版本该文件的写法可能是&lt;/span&gt;
&lt;span class="c"&gt;#from django.core.handlers.wsgi import WSGIHandler&lt;/span&gt;
&lt;span class="c"&gt;#application = WSGIHandler()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动之后访问本地8080端口，假如&lt;code&gt;Django&lt;/code&gt;项目正常的话，就可以看到&lt;code&gt;Django&lt;/code&gt;项目页面了。&lt;/p&gt;
&lt;h2&gt;部署&lt;code&gt;Django&lt;/code&gt;+&lt;code&gt;Nginx&lt;/code&gt;+&lt;code&gt;uWSGI&lt;/code&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;把大象装到冰箱里分三步，第一步，打开冰箱门，第二步，把大象塞进去，第三步，把冰箱门关上。&lt;code&gt;Django&lt;/code&gt;、&lt;code&gt;Nginx&lt;/code&gt;和&lt;code&gt;uWSGI&lt;/code&gt;的合作也是如此，按照步骤一步步来就可以轻松部署好&lt;code&gt;Django&lt;/code&gt;项目。
在正式开始部署之前，我们再回忆一下&lt;code&gt;Nginx&lt;/code&gt;和&lt;code&gt;uWSGI&lt;/code&gt;即将扮演的角色：
- &lt;code&gt;Nginx&lt;/code&gt;：WEB服务器，更多的用来响应静态资源请求。
- &lt;code&gt;uWSGI&lt;/code&gt;：WEB应用服务器，用来传递非静态资源的请求给&lt;code&gt;Django&lt;/code&gt;处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1. 配置&lt;code&gt;Django&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在你的&lt;code&gt;settings.py&lt;/code&gt;配置文件中，设置&lt;code&gt;ALLOWED_HOST&lt;/code&gt;（其中&lt;code&gt;127.0.0.1&lt;/code&gt;在实际部署时与第三步&lt;code&gt;Nginx&lt;/code&gt;的配置文件中绑定的IP地址保持一致）:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ALLOWED_HOST=['127.0.0.1']&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果将&lt;code&gt;settings.py&lt;/code&gt;中DEBUG关掉，即&lt;code&gt;DEBUG=False&lt;/code&gt;，必须在&lt;code&gt;Django&lt;/code&gt;项目的模板目录下添加一个&lt;code&gt;404.html&lt;/code&gt;和一个&lt;code&gt;500.html&lt;/code&gt;文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正式的生产环境下，非常不建议打开&lt;code&gt;Django&lt;/code&gt;的DEBUG功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. 配置&lt;code&gt;uWSGI&lt;/code&gt;：&lt;/h3&gt;
&lt;p&gt;很显然，项目的正式部署肯定不能使用蠢萌的命令行解决问题。我们使用更规范的&lt;code&gt;ini&lt;/code&gt;配置文件（&lt;code&gt;XML&lt;/code&gt;也类似，但执行命令略有不同）来配置&lt;code&gt;uWSGI&lt;/code&gt;。
在开始编写配置文件之前，我们先做以下假设：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;为了提高并发量，&lt;code&gt;uWSGI&lt;/code&gt;设置为四进程双线程（默认是单进程单线程）&lt;/li&gt;
&lt;li&gt;假设你的&lt;code&gt;Django&lt;/code&gt;项目目录是：&lt;code&gt;/home/foo/projects/yoursite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Django&lt;/code&gt;项目自动生成的wsgi脚本在与&lt;code&gt;settings.py&lt;/code&gt;同级目录下：&lt;code&gt;yoursite/wsgi.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用socket方式而不是http作为代理，实现&lt;code&gt;uWSGI&lt;/code&gt;与&lt;code&gt;Nginx&lt;/code&gt;的连接&lt;/li&gt;
&lt;li&gt;设置&lt;code&gt;uWSGI&lt;/code&gt;创建的socket代理端口为8080，也即&lt;code&gt;127.0.0.1:8080&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据以上假设，我们创建一个&lt;code&gt;yoursite_uWSGI.ini&lt;/code&gt;配置文件，并写入以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;socket&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;127.0.0.1:8080&lt;/span&gt;
&lt;span class="na"&gt;chdir&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/foo/projects/yoursite&lt;/span&gt;
&lt;span class="na"&gt;wsgi-file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;yoursite/wsgi.py&lt;/span&gt;
&lt;span class="na"&gt;processes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;4&lt;/span&gt;
&lt;span class="na"&gt;threads&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;;老版本的Django(&amp;lt;1.4)需要多一点的配置信息,当然也需要自己创建一个wsgi.py填入上边提到的内容：&lt;/span&gt;
&lt;span class="c1"&gt;;env        = DJANGO_SETTINGS_MODULE=yoursite.settings&lt;/span&gt;
&lt;span class="c1"&gt;;module     = django.core.handlers.wsgi:WSGIHanlder()&lt;/span&gt;
&lt;span class="c1"&gt;;pythonpath = ..&lt;/span&gt;
&lt;span class="c1"&gt;;pythonpath设置成 .. 是为了找到yoursite.settings这个模块&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;假如不使用配置文件,这个&lt;code&gt;yoursite_uWSGI.ini&lt;/code&gt;配置文件对应在终端的命令是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;uwsgi --socket 127.0.0.1:8080 --chdir /home/foo/projects/yoursite --wsgi-file&lt;span class="o"&gt;=&lt;/span&gt;yoursite/wsgi.py --processes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; --threads&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更老的版本的&lt;code&gt;Django&lt;/code&gt;(&amp;lt;1.4)对应的终端命令是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;uwsgi --socket 127.0.0.1:8080 --chdir /home/foo/projects/yoursite --wsgi-file&lt;span class="o"&gt;=&lt;/span&gt;yoursite/wsgi.py --processes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; --threads&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;  --pythonpath .. --env &lt;span class="nv"&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yoursite.settings --module &lt;span class="s2"&gt;&amp;quot;django.core.handlers.wsgi:WSGIHandler()&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;没错确实太长了，所以更推荐使用配置文件╮(╯▽╰)╭
好了配置文件准备完毕，在该配置文件所在目录执行命令来按照配置文件设定启动&lt;code&gt;uWSGI&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;uwsgi yoursite_uWSGI.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. 配置&lt;code&gt;Nginx&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;同样，在开始配置&lt;code&gt;Nginx&lt;/code&gt;之前，我们也先做以下假设&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Nginx&lt;/code&gt;日志文件在目录：&lt;code&gt;/home/foo/var/logs/&lt;/code&gt;,确保存在该目录&lt;/li&gt;
&lt;li&gt;你的&lt;code&gt;Django&lt;/code&gt;项目的static目录：&lt;code&gt;/home/foo/projects/yoursite/static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你的&lt;code&gt;Django&lt;/code&gt;项目&lt;code&gt;yoursite&lt;/code&gt;的media目录：&lt;code&gt;/home/foo/projects/yoursite/media&lt;/code&gt;，根据需求也可以不存在media目录（对应的&lt;code&gt;Nginx&lt;/code&gt;配置文件中删去&lt;code&gt;location /media&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;你的服务器域名（此处使用本地环回地址用作开发调试）：127.0.0.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nginx&lt;/code&gt;的WEB服务映射到端口：80&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nginx&lt;/code&gt;与&lt;code&gt;uWSGI&lt;/code&gt;建立通信连接的端口为8080（与&lt;code&gt;uWSGI&lt;/code&gt;配置中一致）&lt;/li&gt;
&lt;li&gt;假设&lt;code&gt;Django&lt;/code&gt;项目的配置文件&lt;code&gt;settings.py&lt;/code&gt;中&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;STATIC_URL='/static/'&lt;/code&gt;
&lt;code&gt;STATIC_URL='/media/'&lt;/code&gt;
&lt;code&gt;ALLOWED_HOSTS=['127.0.0.1']&lt;/code&gt;#或者设置成&lt;code&gt;ALLOWED_HOST='*'&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设结束，我们对&lt;code&gt;Nginx&lt;/code&gt;的配置文件&lt;code&gt;nginx.conf&lt;/code&gt;做如下配置，&lt;code&gt;ubuntu&lt;/code&gt;下的&lt;code&gt;Nginx&lt;/code&gt;也许你需要修改的是&lt;code&gt;site-available&lt;/code&gt;文件夹中的&lt;code&gt;default&lt;/code&gt;配置文件： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:80&lt;/span&gt; &lt;span class="s"&gt;default_server&lt;/span&gt; &lt;span class="s"&gt;ipv6only=on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="s"&gt;.0.0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/home/var/logs/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;error_log&lt;/span&gt; &lt;span class="s"&gt;/home/var/logs/error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;#使Nginx与uWSGI连接&lt;/span&gt;
         &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="kn"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="mi"&gt;502&lt;/span&gt; &lt;span class="mi"&gt;503&lt;/span&gt; &lt;span class="mi"&gt;504&lt;/span&gt; &lt;span class="s"&gt;/50x.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/50x.html&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="c1"&gt;#注意location是/static，不是settings.py中的/static/&lt;/span&gt;
     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/home/foo/projects/yoursite/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/media&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/home/foo/projects/yoursite/media&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt;的配置文件也准备完毕，执行命令重启&lt;code&gt;Nginx&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nginx -s reload
&lt;span class="c"&gt;#需要root权限则sudo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4. 打开站点&lt;/h3&gt;
&lt;p&gt;完成了前三步配置之后，我们已经按照配置文件重新启动了&lt;code&gt;uWSGI&lt;/code&gt;和&lt;code&gt;Nginx&lt;/code&gt;。此时在浏览器地址栏输入&lt;code&gt;127.0.0.1:80&lt;/code&gt;即可访问你的&lt;code&gt;Django&lt;/code&gt;站点。
同时我们也实现了最初的目标，&lt;strong&gt;用&lt;code&gt;Nginx&lt;/code&gt;作为web服务器接收处理静态资源请求，用&lt;code&gt;uWSGI&lt;/code&gt;作为web应用服务器处理非静态资源请求&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;一些小技巧&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不建议使用&lt;code&gt;uWSGI&lt;/code&gt;+&lt;code&gt;Nginx&lt;/code&gt;的部署来进行&lt;code&gt;Django&lt;/code&gt;开发，建议使用&lt;code&gt;Django&lt;/code&gt;自带的&lt;code&gt;Develop Server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;代码变动之后，需要重启&lt;code&gt;uWSGI&lt;/code&gt;。每次手动杀死&lt;code&gt;uWSGI&lt;/code&gt;太麻烦可以在&lt;code&gt;uWSGI&lt;/code&gt;的启动配置文件中假如一条配置项可以在每次修改python脚本保存之后自动重启&lt;code&gt;uWSGI&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;py-autoreload = 1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;仅仅kill掉某一个worker进程kill不掉&lt;code&gt;uWSGI&lt;/code&gt;，因为master进程会重生一个worker进程。甚至kill掉master进程也不会关闭&lt;code&gt;uWSGI&lt;/code&gt;而是会重新生成pid相同的master进程和四个pid不同的新的worker进程。当然了，可以通过执行终端命令&lt;code&gt;kill -9 uwsgi&lt;/code&gt;强制关闭&lt;code&gt;uWSGI&lt;/code&gt;所有的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;引用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/"&gt;The uWSGI Project Doc 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://segmentfault.com/q/1010000000490957"&gt;python-dev包是什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://django-china.cn/topic/101/"&gt;五步教你实现使用Nginx+uWSGI+Django方法部署Django程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://heipark.iteye.com/blog/1750970"&gt;uWSGI笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/itech/archive/2009/08/18/1548860.html"&gt;web服务器与应用服务器概念比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.slogra.com/post-233.html"&gt;nginx不浏览直接下载文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://oldj.net/article/django-big-file-response/"&gt;在Django中提供大内容（或大文件）下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/wlx3351/article/details/6549328"&gt;django实现中文文件名下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.linuxidc.com/Linux/2013-05/83915.htm"&gt;Nginx下载or呈现静态文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.111cn.net/sys/nginx/53269.htm"&gt;APACHE和NGINX配置支持文件下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.365mini.com/page/apache-concurrency-configuration.htm"&gt;APACHE的MPM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Django"></category><category term="Nginx"></category></entry></feed>